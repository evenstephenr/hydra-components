{"version":3,"file":"index.js","sources":["../src/Alert/index.ts","../src/Button/index.tsx","../src/Overlays/Backgrounds.tsx","../src/Overlays/Overlay.tsx"],"sourcesContent":["type AlertProps = {\r\n  message: string,\r\n}\r\n\r\nexport function Alert (props: AlertProps) {\r\n  const { message } = props;\r\n  return alert(message);\r\n}\r\n","/// <reference path=\"../global.d.ts\" />\r\nimport React, { ReactNode } from 'react';\r\n\r\n\r\ntype ButtonProps = {\r\n  children: ReactNode,\r\n} & ReactButton\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  const { children, ...rest } = props;\r\n  console.log('hello from hydra/packages/components')\r\n  return (\r\n    <button {...rest}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React, { FC, useEffect } from \"react\";\r\n\r\nexport enum BACKGROUND_TYPE {\r\n  NONE = \"NONE\",\r\n  DARKEN = \"DARKEN\",\r\n  BLUR = \"BLUR\",\r\n}\r\n\r\nexport type BackgroundProps = {\r\n  backgroundThreshold?: number; // the 'magnitude' of backgroundType\r\n  backgroundType?: BACKGROUND_TYPE; // none, background with opacity, filter:blur\r\n};\r\n\r\nexport const NoBackground: FC = ({ children }) => (\r\n  <div\r\n    id=\"hydra-overlay-background-container-none\"\r\n    style={{\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport const DarkBackground: FC<BackgroundProps> = ({\r\n  children,\r\n  backgroundThreshold = 0.45,\r\n}) => (\r\n  <div\r\n    id=\"hydra-overlay-background-container-darken\"\r\n    style={{\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      backgroundColor: `rgba(140, 140, 140, ${backgroundThreshold})`,\r\n    }}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport const BlurryBackground: FC<BackgroundProps> = ({\r\n  children,\r\n  backgroundThreshold = 0.45,\r\n}) => {\r\n  useEffect(() => {\r\n    const wrapper = document.getElementById(\"hydra-overlay-wrapper\");\r\n    if (wrapper) {\r\n      wrapper.style.filter = `blur(${backgroundThreshold * 10}px)`;\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id=\"hydra-overlay-background-container-blur\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport const Background: FC<BackgroundProps> = (props) => {\r\n  switch (props.backgroundType) {\r\n    case BACKGROUND_TYPE.DARKEN:\r\n      return <DarkBackground {...props} />;\r\n    case BACKGROUND_TYPE.BLUR:\r\n      return <BlurryBackground {...props} />;\r\n    case BACKGROUND_TYPE.NONE:\r\n      return <NoBackground {...props} />;\r\n    default:\r\n      return <DarkBackground {...props} />;\r\n  }\r\n};\r\n","import React, { useState, createContext } from \"react\";\r\nimport { BackgroundProps, Background } from \"./Backgrounds\";\r\n\r\ntype ProviderProps = {\r\n  componentMap: { [k: string]: React.ReactNode }; // registers a list of components to render based on 'active' state\r\n  // height?: number; // allow to be defined, don't allow to be larger than 100%\r\n  // width?: number; // allow to be defined, don't allow to be larger than 100%\r\n} & BackgroundProps;\r\n\r\ntype OpenOptions = {\r\n  component: string;\r\n  // onActivate?: Noop<void>; // callback for consumers\r\n  // onDeactivate?: Noop<void>; // callback for consumers\r\n  // props: any, // TODO: can't you pass this directly?\r\n  // closeTriggers: 'DEFAULT' | 'CLICK' | 'KEY' // TODO: should different overlays have different close logic?\r\n};\r\n\r\ntype Context = {\r\n  isActive: boolean; // will be true if the overlay is 'active'\r\n  activate: CB<OpenOptions, void>; // will render an Overlay component with the given options\r\n  // onActivate: Noop<void>; // provided as a hook for consumers\r\n  deactivate: Noop<void>; // passed down to OpenOptions.component as a render prop\r\n  // onDeactivate: Noop<void>; // provided as a hook for consumers\r\n} & ProviderProps;\r\n\r\ntype State = {\r\n  isActive: boolean;\r\n  component?: string;\r\n};\r\n\r\nconst { Consumer: C, Provider: P } = createContext<Context | null>(null);\r\n\r\n/**\r\n * This is the root Overlay Provider for any component that needs to present itself outside of the normal DOM hierarchy\r\n *\r\n * @param {boolean} canClickThrough (optional)\r\n *  - if true, allows click events through overlay when overlay is 'active'\r\n *  - defaults to false\r\n *\r\n * TODO:\r\n * - All raw HTML elements should be configurable (as components), with default styles exposed as exports\r\n * - Extract Modal logic out of this module\r\n * - Find a better way to document props\r\n */\r\nconst OverlayProvider: React.FC<ProviderProps> = ({\r\n  children,\r\n  backgroundType,\r\n  backgroundThreshold = 0.45, // when backgroundType === BLUR, filter: blur(backgroundThreshold * 10 + 'px')\r\n  componentMap,\r\n}) => {\r\n  const [overlayState, setOverlayState] = useState<State>({\r\n    isActive: false,\r\n  });\r\n\r\n  const activate: CB<OpenOptions, void> = ({ component }) =>\r\n    setOverlayState({ component, isActive: true });\r\n\r\n  const deactivate: Noop<void> = () => setOverlayState({ isActive: false });\r\n\r\n  const { component, isActive } = overlayState;\r\n\r\n  const Component = (component && componentMap[component]) as React.ElementType;\r\n\r\n  return (\r\n    <P\r\n      value={{\r\n        isActive,\r\n        componentMap,\r\n        backgroundType,\r\n        backgroundThreshold,\r\n        activate,\r\n        deactivate,\r\n      }}\r\n    >\r\n      <div id=\"hydra-overlay-wrapper\">{children}</div>\r\n      <div\r\n        id=\"hydra-overlay\"\r\n        style={{\r\n          position: \"fixed\",\r\n          left: \"0px\",\r\n          top: \"0px\",\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n          pointerEvents: isActive ? \"initial\" : \"none\",\r\n        }}\r\n      >\r\n        {isActive && Component && (\r\n          <Background\r\n            backgroundType={backgroundType}\r\n            backgroundThreshold={backgroundThreshold}\r\n          >\r\n            <div id=\"hydra-overlay-modal-container\">\r\n              <Component />\r\n            </div>\r\n          </Background>\r\n        )}\r\n      </div>\r\n    </P>\r\n  );\r\n};\r\n\r\nexport const Overlay = {\r\n  Consumer: C,\r\n  Provider: OverlayProvider,\r\n};\r\n"],"names":["Alert","props","message","alert","Button","children","rest","console","log","React","BACKGROUND_TYPE","NoBackground","id","style","width","height","DarkBackground","backgroundThreshold","backgroundColor","BlurryBackground","useEffect","wrapper","document","getElementById","filter","Background","backgroundType","DARKEN","BLUR","NONE","createContext","C","Consumer","P","Provider","OverlayProvider","componentMap","useState","isActive","overlayState","setOverlayState","activate","component","deactivate","Component","value","position","left","top","pointerEvents","Overlay"],"mappings":"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"}